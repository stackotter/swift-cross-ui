{"abstract":[{"type":"text","text":"A view used by "},{"isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","type":"reference"},{"type":"text","text":" to support non-exhaustive if statements."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView\/body"],"generated":true,"anchor":"Instance-Properties"},{"title":"Default Implementations","identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView\/View-Implementations"],"generated":true,"anchor":"Default-Implementations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView"},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/SwiftCrossUI\/s8CopyableP","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftcrossui\/optionalview"]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"OptionalView","kind":"identifier"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:12SwiftCrossUI4ViewP","text":"View","kind":"typeIdentifier","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View"}],"languages":["swift"]}]}],"metadata":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"OptionalView"}],"title":"OptionalView","modules":[{"name":"SwiftCrossUI"}],"remoteSource":{"fileName":"OptionalView.swift","url":"https:\/\/github.com\/stackotter\/swift-cross-ui\/blob\/main\/Sources\/SwiftCrossUI\/Views\/OptionalView.swift#L2"},"symbolKind":"struct","roleHeading":"Structure","externalID":"s:12SwiftCrossUI12OptionalViewV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionalView"}]},"references":{"doc://SwiftCrossUI/documentation/SwiftCrossUI/View":{"abstract":[{"text":"A view that can be rendered by any backend.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"View","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","kind":"identifier"}],"title":"View","url":"\/documentation\/swiftcrossui\/view","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View-graph":{"role":"collectionGroup","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","url":"\/documentation\/swiftcrossui\/view-graph","title":"View graph","kind":"article","type":"topic","abstract":[]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewSize":{"abstract":[{"type":"text","text":"The size of a view. Includes ideal size, and minimum\/maximum width and height"},{"type":"text","text":" "},{"type":"text","text":"along with the size you’d expect."}],"navigatorTitle":[{"kind":"identifier","text":"ViewSize"}],"url":"\/documentation\/swiftcrossui\/viewsize","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewSize"}],"type":"topic","title":"ViewSize","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EitherView":{"url":"\/documentation\/swiftcrossui\/eitherview","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","abstract":[{"type":"text","text":"A view used by "},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","type":"reference","isActive":true},{"type":"text","text":" to support if\/else conditional statements."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EitherView"}],"role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EitherView"}],"title":"EitherView"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View/body":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","title":"body","defaultImplementations":1,"url":"\/documentation\/swiftcrossui\/view\/body","required":true,"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:12SwiftCrossUI4ViewP7ContentQa","text":"Content","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"The view’s contents."}],"type":"topic"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/DynamicProperty":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicProperty","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/dynamicproperty","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty","title":"DynamicProperty","role":"symbol","abstract":[{"type":"text","text":"A property wrapper updated by the view graph before each access to"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","isActive":true},{"type":"text","text":". Conforming types should use internal mutability (see "},{"type":"codeVoice","code":"Box"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to implement this protocol’s non-mutable methods if required. This"},{"type":"text","text":" "},{"type":"text","text":"protocol avoids mutation to allow state properties and such to be"},{"type":"text","text":" "},{"text":"captured even though views are structs.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"DynamicProperty","kind":"identifier"}]},"doc://SwiftCrossUI/s8CopyableP":{"identifier":"doc:\/\/SwiftCrossUI\/s8CopyableP","type":"unresolvable","title":"Swift.Copyable"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewUpdateResult":{"abstract":[],"url":"\/documentation\/swiftcrossui\/viewupdateresult","type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ViewUpdateResult"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewUpdateResult"}],"title":"ViewUpdateResult"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/OptionalView":{"navigatorTitle":[{"kind":"identifier","text":"OptionalView"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionalView"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","type":"topic","abstract":[{"type":"text","text":"A view used by "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","isActive":true},{"type":"text","text":" to support non-exhaustive if statements."}],"url":"\/documentation\/swiftcrossui\/optionalview","title":"OptionalView","role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewBuilder":{"role":"symbol","type":"topic","kind":"symbol","title":"ViewBuilder","abstract":[{"type":"text","text":"A result builder used to compose views together into composite views in"},{"type":"text","text":" "},{"type":"text","text":"a declarative manner."}],"navigatorTitle":[{"kind":"identifier","text":"ViewBuilder"}],"url":"\/documentation\/swiftcrossui\/viewbuilder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewBuilder"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Scene-graph":{"type":"topic","title":"Scene graph","role":"collectionGroup","url":"\/documentation\/swiftcrossui\/scene-graph","abstract":[],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph","kind":"article"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/OptionalView/View-Implementations":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView\/View-Implementations","kind":"article","role":"collectionGroup","type":"topic","abstract":[],"title":"View Implementations","url":"\/documentation\/swiftcrossui\/optionalview\/view-implementations"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/PublishedMarkerProtocol":{"url":"\/documentation\/swiftcrossui\/publishedmarkerprotocol","role":"symbol","navigatorTitle":[{"text":"PublishedMarkerProtocol","kind":"identifier"}],"abstract":[{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true},{"type":"text","text":" values nested within an "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true},{"type":"text","text":" object"},{"type":"text","text":" "},{"type":"text","text":"will only have their changes published by the parent "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true},{"type":"text","text":" "},{"type":"text","text":"if marked with this marker protocol. This avoids uncertainty around which"},{"type":"text","text":" "},{"type":"text","text":"properties will or will not have their changes published by the parent."},{"type":"text","text":" "},{"type":"text","text":"For clarity reasons, you shouldn’t conform your own types to this protocol."},{"type":"text","text":" "},{"type":"text","text":"Instead, apply the "},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published","isActive":true},{"type":"text","text":" property wrapper when needed."}],"kind":"symbol","type":"topic","title":"PublishedMarkerProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PublishedMarkerProtocol","kind":"identifier"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/LayoutSystem":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LayoutSystem"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LayoutSystem"}],"url":"\/documentation\/swiftcrossui\/layoutsystem","title":"LayoutSystem"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/OptionalView/body":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView\/body","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:12SwiftCrossUI9EmptyViewV","text":"EmptyView"}],"role":"symbol","type":"topic","abstract":[],"url":"\/documentation\/swiftcrossui\/optionalview\/body","title":"body"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ObservableObject":{"role":"symbol","url":"\/documentation\/swiftcrossui\/observableobject","title":"ObservableObject","abstract":[{"type":"text","text":"An object that can be observed for changes."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableObject"}],"navigatorTitle":[{"kind":"identifier","text":"ObservableObject"}],"type":"topic","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","kind":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI":{"url":"\/documentation\/swiftcrossui","type":"topic","abstract":[{"type":"text","text":"Create cross-platform desktop apps for macOS, Linux, Windows, iOS and tvOS."}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI","title":"SwiftCrossUI","kind":"symbol","role":"collection"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Published":{"abstract":[{"type":"text","text":"A wrapper which publishes a change whenever the wrapped value is set. If"},{"type":"text","text":" "},{"type":"text","text":"the wrapped value is "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject"},{"type":"text","text":", its "},{"type":"codeVoice","code":"didChange"},{"type":"text","text":" publisher will"},{"type":"text","text":" "},{"type":"text","text":"also be forwarded to the wrapper’s publisher."}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Published"}],"title":"Published","navigatorTitle":[{"kind":"identifier","text":"Published"}],"url":"\/documentation\/swiftcrossui\/published","role":"symbol","type":"topic","kind":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EmptyView":{"kind":"symbol","url":"\/documentation\/swiftcrossui\/emptyview","abstract":[{"text":"A placeholder view used by elementary ","type":"text"},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View","isActive":true,"type":"reference"},{"text":" implementations which don’t have bodies. Fatally","type":"text"},{"text":" ","type":"text"},{"text":"crashes if rendered.","type":"text"}],"role":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView","navigatorTitle":[{"text":"EmptyView","kind":"identifier"}],"title":"EmptyView","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmptyView","kind":"identifier"}],"type":"topic"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget":{"url":"\/documentation\/swiftcrossui\/anywidget","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget","title":"AnyWidget","abstract":[{"type":"text","text":"A type-erased widget which can be stored without having to propagate"},{"type":"text","text":" "},{"type":"text","text":"the selected backend type through the type system of the whole view graph"},{"type":"text","text":" "},{"type":"text","text":"system of types, which would leak it back into user view implementations"},{"type":"text","text":" "},{"type":"text","text":"making the backend hard to switch for developers."}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyWidget"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyWidget"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView":{"title":"HotReloadableView","role":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HotReloadableView","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/hotreloadableview","abstract":[{"type":"text","text":"A view which attempts to persist the state of its view subtree even"},{"type":"text","text":" "},{"type":"text","text":"when the subtree’s structure changes. Uses state serialization (via"},{"type":"text","text":" "},{"type":"text","text":"view graph snapshotting) to persist view state even when a child"},{"type":"text","text":" "},{"type":"text","text":"view’s implementation gets swapped out with an implementation from"},{"type":"text","text":" "},{"type":"text","text":"a newly-loaded dylib (this is what makes this useful for hot reloading)."}],"navigatorTitle":[{"text":"HotReloadableView","kind":"identifier"}],"type":"topic","kind":"symbol"}}}