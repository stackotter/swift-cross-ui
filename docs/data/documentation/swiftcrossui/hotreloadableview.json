{"identifier":{"url":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI"]]},"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HotReloadableView","kind":"identifier"}],"remoteSource":{"fileName":"HotReloadableView.swift","url":"https:\/\/github.com\/stackotter\/swift-cross-ui\/blob\/main\/Sources\/SwiftCrossUI\/Views\/HotReloadableView.swift#L11"},"roleHeading":"Structure","role":"symbol","title":"HotReloadableView","externalID":"s:12SwiftCrossUI17HotReloadableViewV","symbolKind":"struct","navigatorTitle":[{"text":"HotReloadableView","kind":"identifier"}],"modules":[{"name":"SwiftCrossUI"}]},"abstract":[{"text":"A view which attempts to persist the state of its view subtree even","type":"text"},{"text":" ","type":"text"},{"text":"when the subtree’s structure changes. Uses state serialization (via","type":"text"},{"text":" ","type":"text"},{"text":"view graph snapshotting) to persist view state even when a child","type":"text"},{"text":" ","type":"text"},{"text":"view’s implementation gets swapped out with an implementation from","type":"text"},{"text":" ","type":"text"},{"text":"a newly-loaded dylib (this is what makes this useful for hot reloading).","type":"text"}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/SwiftCrossUI\/s8SendableP","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View"],"title":"Conforms To","kind":"relationships"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph"],"generated":true}],"variants":[{"paths":["\/documentation\/swiftcrossui\/hotreloadableview"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView\/init(_:)-80rbw","doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView\/init(_:)-85pqu"],"generated":true,"title":"Initializers","anchor":"Initializers"},{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView\/body"],"generated":true,"title":"Instance Properties","anchor":"Instance-Properties"},{"identifiers":["doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView\/View-Implementations"],"generated":true,"title":"Default Implementations","anchor":"Default-Implementations"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","text":"MainActor","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HotReloadableView"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Only expected to be used directly by SwiftCrossUI itself or third"},{"type":"text","text":" "},{"type":"text","text":"party libraries extending SwiftCrossUI’s hot reloading capabilities."}]}],"kind":"content"}],"references":{"doc://SwiftCrossUI/documentation/SwiftCrossUI/View-graph":{"url":"\/documentation\/swiftcrossui\/view-graph","kind":"article","title":"View graph","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View-graph","type":"topic","role":"collectionGroup","abstract":[]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EitherView":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EitherView","kind":"identifier"}],"navigatorTitle":[{"text":"EitherView","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EitherView","url":"\/documentation\/swiftcrossui\/eitherview","title":"EitherView","abstract":[{"text":"A view used by ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","isActive":true},{"text":" to support if\/else conditional statements.","type":"text"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View":{"type":"topic","abstract":[{"type":"text","text":"A view that can be rendered by any backend."}],"title":"View","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"View"}],"url":"\/documentation\/swiftcrossui\/view","navigatorTitle":[{"kind":"identifier","text":"View"}],"role":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/LayoutSystem":{"url":"\/documentation\/swiftcrossui\/layoutsystem","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/LayoutSystem","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LayoutSystem"}],"title":"LayoutSystem","kind":"symbol","abstract":[],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LayoutSystem"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/OptionalView":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionalView"}],"title":"OptionalView","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OptionalView"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/OptionalView","abstract":[{"text":"A view used by ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","isActive":true},{"text":" to support non-exhaustive if statements.","type":"text"}],"url":"\/documentation\/swiftcrossui\/optionalview"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewBuilder":{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewBuilder","navigatorTitle":[{"kind":"identifier","text":"ViewBuilder"}],"url":"\/documentation\/swiftcrossui\/viewbuilder","title":"ViewBuilder","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A result builder used to compose views together into composite views in"},{"type":"text","text":" "},{"type":"text","text":"a declarative manner."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewBuilder","kind":"identifier"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/View/body":{"title":"body","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","role":"symbol","abstract":[{"type":"text","text":"The view’s contents."}],"kind":"symbol","type":"topic","url":"\/documentation\/swiftcrossui\/view\/body","defaultImplementations":1,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:12SwiftCrossUI4ViewP7ContentQa","text":"Content"}],"required":true},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView/init(_:)-80rbw":{"role":"symbol","title":"init(_:)","abstract":[],"kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView\/init(_:)-80rbw","url":"\/documentation\/swiftcrossui\/hotreloadableview\/init(_:)-80rbw","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"preciseIdentifier":"s:12SwiftCrossUI4ViewP","text":"View","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView/body":{"type":"topic","url":"\/documentation\/swiftcrossui\/hotreloadableview\/body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EmptyView","preciseIdentifier":"s:12SwiftCrossUI9EmptyViewV"}],"title":"body","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView\/body","abstract":[],"kind":"symbol","role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/DynamicProperty":{"title":"DynamicProperty","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicProperty","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/dynamicproperty","type":"topic","abstract":[{"text":"A property wrapper updated by the view graph before each access to","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View\/body","type":"reference"},{"text":". Conforming types should use internal mutability (see ","type":"text"},{"code":"Box","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"to implement this protocol’s non-mutable methods if required. This","type":"text"},{"text":" ","type":"text"},{"text":"protocol avoids mutation to allow state properties and such to be","type":"text"},{"text":" ","type":"text"},{"text":"captured even though views are structs.","type":"text"}],"navigatorTitle":[{"text":"DynamicProperty","kind":"identifier"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/DynamicProperty"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Scene-graph":{"title":"Scene graph","abstract":[],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Scene-graph","url":"\/documentation\/swiftcrossui\/scene-graph","type":"topic","role":"collectionGroup","kind":"article"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewSize":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewSize","kind":"identifier"}],"abstract":[{"text":"The size of a view. Includes ideal size, and minimum\/maximum width and height","type":"text"},{"text":" ","type":"text"},{"text":"along with the size you’d expect.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/swiftcrossui\/viewsize","title":"ViewSize","navigatorTitle":[{"text":"ViewSize","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewSize"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/Published":{"type":"topic","title":"Published","abstract":[{"text":"A wrapper which publishes a change whenever the wrapped value is set. If","type":"text"},{"text":" ","type":"text"},{"text":"the wrapped value is ","type":"text"},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true,"type":"reference"},{"text":", its ","type":"text"},{"code":"didChange","type":"codeVoice"},{"text":" publisher will","type":"text"},{"text":" ","type":"text"},{"text":"also be forwarded to the wrapper’s publisher.","type":"text"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Published","kind":"identifier"}],"url":"\/documentation\/swiftcrossui\/published","kind":"symbol","navigatorTitle":[{"text":"Published","kind":"identifier"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI":{"role":"collection","kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI","title":"SwiftCrossUI","type":"topic","url":"\/documentation\/swiftcrossui","abstract":[{"type":"text","text":"Create cross-platform desktop apps for macOS, Linux, Windows, iOS and tvOS."}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/AnyWidget":{"kind":"symbol","abstract":[{"text":"A type-erased widget which can be stored without having to propagate","type":"text"},{"text":" ","type":"text"},{"text":"the selected backend type through the type system of the whole view graph","type":"text"},{"text":" ","type":"text"},{"text":"system of types, which would leak it back into user view implementations","type":"text"},{"text":" ","type":"text"},{"text":"making the backend hard to switch for developers.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyWidget"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/AnyWidget","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyWidget"}],"type":"topic","url":"\/documentation\/swiftcrossui\/anywidget","title":"AnyWidget"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/PublishedMarkerProtocol":{"navigatorTitle":[{"kind":"identifier","text":"PublishedMarkerProtocol"}],"kind":"symbol","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/PublishedMarkerProtocol","title":"PublishedMarkerProtocol","type":"topic","abstract":[{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true,"type":"reference"},{"text":" values nested within an ","type":"text"},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true,"type":"reference"},{"text":" object","type":"text"},{"text":" ","type":"text"},{"text":"will only have their changes published by the parent ","type":"text"},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"if marked with this marker protocol. This avoids uncertainty around which","type":"text"},{"text":" ","type":"text"},{"text":"properties will or will not have their changes published by the parent.","type":"text"},{"text":" ","type":"text"},{"text":"For clarity reasons, you shouldn’t conform your own types to this protocol.","type":"text"},{"text":" ","type":"text"},{"text":"Instead, apply the ","type":"text"},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/Published","isActive":true,"type":"reference"},{"text":" property wrapper when needed.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PublishedMarkerProtocol"}],"url":"\/documentation\/swiftcrossui\/publishedmarkerprotocol","role":"symbol"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView/View-Implementations":{"abstract":[],"title":"View Implementations","url":"\/documentation\/swiftcrossui\/hotreloadableview\/view-implementations","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView\/View-Implementations","type":"topic","role":"collectionGroup","kind":"article"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ObservableObject":{"url":"\/documentation\/swiftcrossui\/observableobject","abstract":[{"type":"text","text":"An object that can be observed for changes."}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ObservableObject","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableObject","kind":"identifier"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"ObservableObject","kind":"identifier"}],"title":"ObservableObject"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView":{"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HotReloadableView","kind":"identifier"}],"navigatorTitle":[{"text":"HotReloadableView","kind":"identifier"}],"title":"HotReloadableView","url":"\/documentation\/swiftcrossui\/hotreloadableview","kind":"symbol","abstract":[{"text":"A view which attempts to persist the state of its view subtree even","type":"text"},{"text":" ","type":"text"},{"text":"when the subtree’s structure changes. Uses state serialization (via","type":"text"},{"text":" ","type":"text"},{"text":"view graph snapshotting) to persist view state even when a child","type":"text"},{"text":" ","type":"text"},{"text":"view’s implementation gets swapped out with an implementation from","type":"text"},{"text":" ","type":"text"},{"text":"a newly-loaded dylib (this is what makes this useful for hot reloading).","type":"text"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/ViewUpdateResult":{"type":"topic","kind":"symbol","url":"\/documentation\/swiftcrossui\/viewupdateresult","title":"ViewUpdateResult","abstract":[],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/ViewUpdateResult","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewUpdateResult"}],"navigatorTitle":[{"kind":"identifier","text":"ViewUpdateResult"}]},"doc://SwiftCrossUI/documentation/SwiftCrossUI/EmptyView":{"navigatorTitle":[{"text":"EmptyView","kind":"identifier"}],"abstract":[{"type":"text","text":"A placeholder view used by elementary "},{"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/View","isActive":true,"type":"reference"},{"type":"text","text":" implementations which don’t have bodies. Fatally"},{"type":"text","text":" "},{"type":"text","text":"crashes if rendered."}],"role":"symbol","type":"topic","title":"EmptyView","kind":"symbol","url":"\/documentation\/swiftcrossui\/emptyview","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmptyView","kind":"identifier"}],"identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/EmptyView"},"doc://SwiftCrossUI/documentation/SwiftCrossUI/HotReloadableView/init(_:)-85pqu":{"type":"topic","url":"\/documentation\/swiftcrossui\/hotreloadableview\/init(_:)-85pqu","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:12SwiftCrossUI4ViewP"},{"kind":"text","text":")"}],"title":"init(_:)","identifier":"doc:\/\/SwiftCrossUI\/documentation\/SwiftCrossUI\/HotReloadableView\/init(_:)-85pqu","abstract":[],"kind":"symbol","role":"symbol"},"doc://SwiftCrossUI/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/SwiftCrossUI\/s8SendableP","title":"Swift.Sendable"}}}